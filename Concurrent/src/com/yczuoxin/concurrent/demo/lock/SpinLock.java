package com.yczuoxin.concurrent.demo.lock;

/**
 * 自旋锁
 * Java 中线程与操作系统中的线程是一一对应的，当一个线程尝试获取独占锁失败后，
 * 会切换到内核状态而挂起，当线程获取到锁时有需要内核状态唤醒该线程，线程从用户状态
 * 切换到内核状态的开销非常大，非常影响性能。
 * 自旋锁则是在获取锁失败时，他不会马上挂起线程，在不放弃 CPU 使用权限的情况下，
 * 多次尝试获取锁（默认是是 10 次，可以使用 -XX: PreBlockSpinsh 参数设置该值），
 *
 * 自旋锁是利用 CPU 时间换取线程阻塞与调度的开销，但也有可能这些 CPU 时间被白白浪费
 */
public class SpinLock {
}
